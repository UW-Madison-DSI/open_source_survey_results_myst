Traceback (most recent call last):
  File "/Users/mariaoros/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/mariaoros/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Users/mariaoros/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/mariaoros/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Users/mariaoros/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Users/mariaoros/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/mariaoros/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Imports
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import plotly.io as pio
import matplotlib as mpl
import numpy as np
from collections import Counter
import re
from myst_nb import glue
from setup import *

df = survey_results

import pandas as pd
import numpy as np
import plotly.graph_objects as go

# --- Inputs ---
# survey_results: your DataFrame with columns QID4 (type) and QID8 (division)
BACKGROUND_COLOR = "#F7F7F7"  # or whatever you use

df = survey_results.copy()

# 1) Child rows: counts by (type=QID4, division=QID8)
child = (
    df.groupby(["QID4", "QID8"], dropna=False)
      .size()
      .reset_index(name="n")
      .rename(columns={"QID4": "type", "QID8": "division"})
)

# Replace NaN with "Unaffiliated" **for labels only** (keeps structure clean)
child["type"] = child["type"].fillna("Unaffiliated")
child["division"] = child["division"].fillna("Unaffiliated")

# 2) Parent rows: totals for each type (as ‚Äúdivision‚Äù label; parent‚Äôs `type` left NA)
parent = (
    df.groupby(["QID4"], dropna=False)
      .size()
      .reset_index(name="n")
      .rename(columns={"QID4": "division"})
)
parent["division"] = parent["division"].fillna("Unaffiliated")
parent["type"] = pd.NA  # becomes the root/parent (empty string) later
parent = parent[["type", "division", "n"]]

# 3) Bind rows and build ids/parents
plot_df = pd.concat(
    [child[["type", "division", "n"]], parent],
    ignore_index=True
)

# ids: parent rows get id = division; child rows get "type_division"
plot_df["ids"] = np.where(
    plot_df["type"].isna(),
    plot_df["division"],
    plot_df["type"].astype(str) + "_" + plot_df["division"].astype(str)
)

# parents: root for parent rows = "" (empty string)
plot_df["type"] = plot_df["type"].fillna("")  # Plotly wants "" for root
plot_df["n"] = plot_df["n"].astype(float)

# 4) Treemap
fig = go.Figure(
    go.Treemap(
        labels=plot_df["division"],
        parents=plot_df["type"],
        ids=plot_df["ids"],
        values=plot_df["n"],
        branchvalues="total",
        hoverinfo="text",
        hovertemplate="<b>%{parent}</b><br>Type: %{label}<br>Responses: %{value}<extra></extra>",
        textposition="middle",
        textfont=dict(size=14),
    )
)

fig.update_layout(
    title="Survey Respondents",
    plot_bgcolor=BACKGROUND_COLOR,
    paper_bgcolor=BACKGROUND_COLOR,
    margin=dict(t=60, l=0, r=0, b=0)
)

fig.show()

fig1.write_html('_static/afiliation_demogr.html', full_html=False, include_plotlyjs='cdn')

------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 68[39m
[32m     64[39m plot_df[[33m"[39m[33mn[39m[33m"[39m] = plot_df[[33m"[39m[33mn[39m[33m"[39m].astype([38;5;28mfloat[39m)
[32m     66[39m [38;5;66;03m# 4) Treemap[39;00m
[32m     67[39m fig = go.Figure(
[32m---> [39m[32m68[39m     [43mgo[49m[43m.[49m[43mTreemap[49m[43m([49m
[32m     69[39m [43m        [49m[43mlabels[49m[43m=[49m[43mplot_df[49m[43m[[49m[33;43m"[39;49m[33;43mdivision[39;49m[33;43m"[39;49m[43m][49m[43m,[49m
[32m     70[39m [43m        [49m[43mparents[49m[43m=[49m[43mplot_df[49m[43m[[49m[33;43m"[39;49m[33;43mtype[39;49m[33;43m"[39;49m[43m][49m[43m,[49m
[32m     71[39m [43m        [49m[43mids[49m[43m=[49m[43mplot_df[49m[43m[[49m[33;43m"[39;49m[33;43mids[39;49m[33;43m"[39;49m[43m][49m[43m,[49m
[32m     72[39m [43m        [49m[43mvalues[49m[43m=[49m[43mplot_df[49m[43m[[49m[33;43m"[39;49m[33;43mn[39;49m[33;43m"[39;49m[43m][49m[43m,[49m
[32m     73[39m [43m        [49m[43mbranchvalues[49m[43m=[49m[33;43m"[39;49m[33;43mtotal[39;49m[33;43m"[39;49m[43m,[49m
[32m     74[39m [43m        [49m[43mhoverinfo[49m[43m=[49m[33;43m"[39;49m[33;43mtext[39;49m[33;43m"[39;49m[43m,[49m
[32m     75[39m [43m        [49m[43mhovertemplate[49m[43m=[49m[33;43m"[39;49m[33;43m<b>[39;49m[33;43m%[39;49m[38;5;132;43;01m{parent}[39;49;00m[33;43m</b><br>Type: [39;49m[33;43m%[39;49m[38;5;132;43;01m{label}[39;49;00m[33;43m<br>Responses: [39;49m[33;43m%[39;49m[38;5;132;43;01m{value}[39;49;00m[33;43m<extra></extra>[39;49m[33;43m"[39;49m[43m,[49m
[32m     76[39m [43m        [49m[43mtextposition[49m[43m=[49m[33;43m"[39;49m[33;43mmiddle[39;49m[33;43m"[39;49m[43m,[49m
[32m     77[39m [43m        [49m[43mtextfont[49m[43m=[49m[38;5;28;43mdict[39;49m[43m([49m[43msize[49m[43m=[49m[32;43m14[39;49m[43m)[49m[43m,[49m
[32m     78[39m [43m    [49m[43m)[49m
[32m     79[39m )
[32m     81[39m fig.update_layout(
[32m     82[39m     title=[33m"[39m[33mSurvey Respondents[39m[33m"[39m,
[32m     83[39m     plot_bgcolor=BACKGROUND_COLOR,
[32m     84[39m     paper_bgcolor=BACKGROUND_COLOR,
[32m     85[39m     margin=[38;5;28mdict[39m(t=[32m60[39m, l=[32m0[39m, r=[32m0[39m, b=[32m0[39m)
[32m     86[39m )
[32m     88[39m fig.show()

[36mFile [39m[32m~/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/plotly/graph_objs/_treemap.py:1726[39m, in [36mTreemap.__init__[39m[34m(self, arg, branchvalues, count, customdata, customdatasrc, domain, hoverinfo, hoverinfosrc, hoverlabel, hovertemplate, hovertemplatesrc, hovertext, hovertextsrc, ids, idssrc, insidetextfont, labels, labelssrc, legend, legendgrouptitle, legendrank, legendwidth, level, marker, maxdepth, meta, metasrc, name, opacity, outsidetextfont, parents, parentssrc, pathbar, root, sort, stream, text, textfont, textinfo, textposition, textsrc, texttemplate, texttemplatesrc, tiling, uid, uirevision, values, valuessrc, visible, **kwargs)[39m
[32m   1724[39m [38;5;28mself[39m._set_property([33m"[39m[33mtextfont[39m[33m"[39m, arg, textfont)
[32m   1725[39m [38;5;28mself[39m._set_property([33m"[39m[33mtextinfo[39m[33m"[39m, arg, textinfo)
[32m-> [39m[32m1726[39m [38;5;28;43mself[39;49m[43m.[49m[43m_set_property[49m[43m([49m[33;43m"[39;49m[33;43mtextposition[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43marg[49m[43m,[49m[43m [49m[43mtextposition[49m[43m)[49m
[32m   1727[39m [38;5;28mself[39m._set_property([33m"[39m[33mtextsrc[39m[33m"[39m, arg, textsrc)
[32m   1728[39m [38;5;28mself[39m._set_property([33m"[39m[33mtexttemplate[39m[33m"[39m, arg, texttemplate)

[36mFile [39m[32m~/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/plotly/basedatatypes.py:4403[39m, in [36mBasePlotlyType._set_property[39m[34m(self, name, arg, provided)[39m
[32m   4397[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_set_property[39m([38;5;28mself[39m, name, arg, provided):
[32m   4398[39m [38;5;250m    [39m[33;03m"""[39;00m
[32m   4399[39m [33;03m    Initialize a property of this object using the provided value[39;00m
[32m   4400[39m [33;03m    or a value popped from the arguments dictionary. If neither[39;00m
[32m   4401[39m [33;03m    is available, do not set the property.[39;00m
[32m   4402[39m [33;03m    """[39;00m
[32m-> [39m[32m4403[39m     [43m_set_property_provided_value[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mname[49m[43m,[49m[43m [49m[43marg[49m[43m,[49m[43m [49m[43mprovided[49m[43m)[49m

[36mFile [39m[32m~/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/plotly/basedatatypes.py:398[39m, in [36m_set_property_provided_value[39m[34m(obj, name, arg, provided)[39m
[32m    396[39m val = provided [38;5;28;01mif[39;00m provided [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m val
[32m    397[39m [38;5;28;01mif[39;00m val [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m398[39m     [43mobj[49m[43m[[49m[43mname[49m[43m][49m = val

[36mFile [39m[32m~/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/plotly/basedatatypes.py:4932[39m, in [36mBasePlotlyType.__setitem__[39m[34m(self, prop, value)[39m
[32m   4928[39m         [38;5;28mself[39m._set_array_prop(prop, value)
[32m   4930[39m     [38;5;66;03m# ### Handle simple property ###[39;00m
[32m   4931[39m     [38;5;28;01melse[39;00m:
[32m-> [39m[32m4932[39m         [38;5;28;43mself[39;49m[43m.[49m[43m_set_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[32m   4933[39m [38;5;28;01melse[39;00m:
[32m   4934[39m     [38;5;66;03m# Make sure properties dict is initialized[39;00m
[32m   4935[39m     [38;5;28mself[39m._init_props()

[36mFile [39m[32m~/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/plotly/basedatatypes.py:5276[39m, in [36mBasePlotlyType._set_prop[39m[34m(self, prop, val)[39m
[32m   5274[39m         [38;5;28;01mreturn[39;00m
[32m   5275[39m     [38;5;28;01melse[39;00m:
[32m-> [39m[32m5276[39m         [38;5;28;01mraise[39;00m err
[32m   5278[39m [38;5;66;03m# val is None[39;00m
[32m   5279[39m [38;5;66;03m# -----------[39;00m
[32m   5280[39m [38;5;28;01mif[39;00m val [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m   5281[39m     [38;5;66;03m# Check if we should send null update[39;00m

[36mFile [39m[32m~/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/plotly/basedatatypes.py:5271[39m, in [36mBasePlotlyType._set_prop[39m[34m(self, prop, val)[39m
[32m   5268[39m validator = [38;5;28mself[39m._get_validator(prop)
[32m   5270[39m [38;5;28;01mtry[39;00m:
[32m-> [39m[32m5271[39m     val = [43mvalidator[49m[43m.[49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m)[49m
[32m   5272[39m [38;5;28;01mexcept[39;00m [38;5;167;01mValueError[39;00m [38;5;28;01mas[39;00m err:
[32m   5273[39m     [38;5;28;01mif[39;00m [38;5;28mself[39m._skip_invalid:

[36mFile [39m[32m~/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/_plotly_utils/basevalidators.py:611[39m, in [36mEnumeratedValidator.validate_coerce[39m[34m(self, v)[39m
[32m    609[39m     v = [38;5;28mself[39m.perform_replacemenet(v)
[32m    610[39m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m.in_values(v):
[32m--> [39m[32m611[39m         [38;5;28;43mself[39;49m[43m.[49m[43mraise_invalid_val[49m[43m([49m[43mv[49m[43m)[49m
[32m    612[39m [38;5;28;01mreturn[39;00m v

[36mFile [39m[32m~/Documents/DSI/2026/open_source_survey_results_myst/venv/lib/python3.13/site-packages/_plotly_utils/basevalidators.py:298[39m, in [36mBaseValidator.raise_invalid_val[39m[34m(self, v, inds)[39m
[32m    295[39m             [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m inds:
[32m    296[39m                 name += [33m"[39m[33m[[39m[33m"[39m + [38;5;28mstr[39m(i) + [33m"[39m[33m][39m[33m"[39m
[32m--> [39m[32m298[39m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[32m    299[39m [38;5;250m            [39m[33;03m"""[39;00m
[32m    300[39m [33;03m    Invalid value of type {typ} received for the '{name}' property of {pname}[39;00m
[32m    301[39m [33;03m        Received value: {v}[39;00m
[32m    302[39m 
[32m    303[39m [33;03m{valid_clr_desc}"""[39;00m.format(
[32m    304[39m                 name=name,
[32m    305[39m                 pname=[38;5;28mself[39m.parent_name,
[32m    306[39m                 typ=type_str(v),
[32m    307[39m                 v=[38;5;28mrepr[39m(v),
[32m    308[39m                 valid_clr_desc=[38;5;28mself[39m.description(),
[32m    309[39m             )
[32m    310[39m         )

[31mValueError[39m: 
    Invalid value of type 'builtins.str' received for the 'textposition' property of treemap
        Received value: 'middle'

    The 'textposition' property is an enumeration that may be specified as:
      - One of the following enumeration values:
            ['top left', 'top center', 'top right', 'middle left',
            'middle center', 'middle right', 'bottom left', 'bottom
            center', 'bottom right']

